# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: An AWS Serverless Application infrastructure for lp-is-gamestore project.

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Properties that are common to all your serverless functions, APIs, and simple tables. 
# All the AWS::Serverless::Function, AWS::Serverless::Api, and AWS::Serverless::SimpleTable resources 
# inherit the properties that are defined in the Globals section.
Globals:
  # Api:    
  #   CacheClusterEnabled: false
  #   CacheClusterSize: "0.5"    
  #   MethodSettings:
  #   - HttpMethod: GET
  #     ResourcePath: /~1news~1*
  #     CachingEnabled: false
  #     CacheDataEncrypted: false
  #     CacheTtlInSeconds: 600
  #     ThrottlingBurstLimit: TBD
  #     ThrottlingRateLimit: TBD
  HttpApi:
    Auth:
      DefaultAuthorizer: AWS_IAM
      EnableIamAuthorizer: true
    DefaultRouteSettings:
      ThrottlingBurstLimit: 100
      ThrottlingRateLimit: 10
    CorsConfiguration:
      AllowOrigins:
      - "*"
      AllowHeaders:
      - content-type
      - authorization
      - x-amz-content-sha256
      - x-amz-date
      - access-control-request-method
      - origin
      ExposeHeaders:
      - "*"
      AllowMethods:
      - GET
      - OPTIONS
      MaxAge: 600
      AllowCredentials: false
  Function:
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: powertools-dotnet-logging-sample
        POWERTOOLS_LOG_LEVEL: Debug
        AWS_ROLE_ID: AWS_ROLE_ID
        AWS_SECRET_ID: AWS_SECRET_ID

Parameters:
  GamestoreQueueName:
    Type: String
    Description: Gamestore Queue Name
    Default: lp-is-gamestore-queue.fifo
  RootUserArn:
    Type: String
    Description: User to maintain SQS
    Default: arn:aws:iam::940482444595:root
  GamestoreAppUserArn:
    Type: String
    Description: Gamestore Application User to which AWS Services allow performing actions
    Default: arn:aws:iam::940482444595:user/gamestore-app

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # The SQS queues
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sqs-queue.html
  # The queue is used for destribution submited carts to consumers that create and process the orders 
  # base on cart's data
  GamestoreQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref GamestoreQueueName
      FifoQueue: true
      ContentBasedDeduplication: true
      ReceiveMessageWaitTimeSeconds: 10
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 432000      
      VisibilityTimeout: 600

  # The SQS queue policies
  GamestoreQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Action: sqs:*
          Effect: Allow
          Resource: !GetAtt GamestoreQueue.Arn
          Principal:
            AWS:
            - !Ref RootUserArn
        - Action:
          - "sqs:DeleteMessage"
          - "sqs:GetQueueUrl"
          - "sqs:ReceiveMessage"
          - "sqs:SendMessage"
          Effect: Allow
          Resource: !GetAtt GamestoreQueue.Arn
          Principal:
            AWS:
            - !Ref GamestoreAppUserArn
      Queues:
      - !Ref GamestoreQueue

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  # The Lambda function (support HTTP API) configs associated with the project: Gamestore.Serverless
  # The Lambda function returns a news for specified game (by Id)
  GamestoreServerlessGetNews:
    Type: AWS::Serverless::Function
    Metadata: 
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
      - RootGet
      SyncedEventProperties:
        RootGet:
        - Path
        - Method
    Properties:
      Description: Get a news for specified game (by Id).
      Runtime: dotnet8
      CodeUri: ./src/Gamestore.Serverless.HttpApi/
      MemorySize: 128
      Timeout: 60
      Policies:
      - AWSLambdaBasicExecutionRole
      PackageType: Zip
      Handler: Gamestore.Serverless.HttpApi::Gamestore.Serverless.HttpApi.Functions_GetNewsAsync_Generated::GetNewsAsync
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /news/{gameId}
            Method: GET

  # The Lambda function (support HTTP API) configs associated with the project: Gamestore.Serverless
  # The Lambda function submit a specified cart
  GamestoreServerlessCartSubmit:
    Type: AWS::Serverless::Function
    Metadata: 
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
      - RootPost
      SyncedEventProperties:
        RootGet:
        - Path
        - Method
    Properties:
      Description: Submit specified cart.
      Runtime: dotnet8
      CodeUri: ./src/Gamestore.Serverless.HttpApi/
      MemorySize: 128
      Timeout: 60
      Policies:
      - AWSLambdaBasicExecutionRole
      PackageType: Zip
      Handler: Gamestore.Serverless.HttpApi::Gamestore.Serverless.HttpApi.Functions_CartSubmitAsync_Generated::CartSubmitAsync
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /cart/submit
            Method: POST

  # The Lambda function (support HTTP API) configs associated with the project: Gamestore.Serverless
  # The Lambda function returns a list of available games that are collected from different sources
  GamestoreServerlessGetGames:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
      - RootGet
      SyncedEventProperties:
        RootGet:
        - Path
        - Method
    Properties:
      Description: Get a list of games from the Gamestore sources.
      Runtime: dotnet8
      CodeUri: ./src/Gamestore.Serverless.HttpApi/
      MemorySize: 128
      Timeout: 60
      Policies:
      - AWSLambdaBasicExecutionRole
      PackageType: Zip
      Handler: Gamestore.Serverless.HttpApi::Gamestore.Serverless.HttpApi.Functions_GetGamesAsync_Generated::GetGamesAsync
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /games
            Method: GET

  #
  GamestoreServerlessDomainEventHandler:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
      - GamestoreQueue
      SyncedEventProperties:
        GamestoreQueue:
        - Queue.Fn::GetAtt
        - BatchSize
        - FunctionResponseTypes
        - ScalingConfig.MaximumConcurrency
    Properties:
      Description: Handle Gamestore Domain Events.
      Runtime: dotnet8
      CodeUri: ./src/Gamestore.Serverless.SQS/
      MemorySize: 128
      Timeout: 60
      Policies:
      - AWSLambdaBasicExecutionRole
      PackageType: Zip
      Handler: Gamestore.Serverless.SQS::Gamestore.Serverless.SQS.Functions_DomainEventHandlerAsync_Generated::DomainEventHandlerAsync
      Events:
        GamestoreQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt GamestoreQueue.Arn
            BatchSize: 10
            FunctionResponseTypes:
            - ReportBatchItemFailures
            ScalingConfig:
              MaximumConcurrency: 1000

Outputs:
  ApiURL:
    Description: API endpoint URL
    Value:
      Fn::Sub: https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/